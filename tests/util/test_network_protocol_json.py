# this file is generated by build_network_protocol_files.py

from typing import Any, Dict

from tests.util.network_protocol_data import *  # noqa: F403


def test_protocol_json(protocol_messages: Dict[str, Dict[str, Any]]) -> None:
    assert str(protocol_messages["new_signage_point"]) == str(new_signage_point.to_json_dict())
    assert type(new_signage_point).from_json_dict(protocol_messages["new_signage_point"]) == new_signage_point
    assert str(protocol_messages["declare_proof_of_space"]) == str(declare_proof_of_space.to_json_dict())
    assert (
        type(declare_proof_of_space).from_json_dict(protocol_messages["declare_proof_of_space"])
        == declare_proof_of_space
    )
    assert str(protocol_messages["request_signed_values"]) == str(request_signed_values.to_json_dict())
    assert (
        type(request_signed_values).from_json_dict(protocol_messages["request_signed_values"]) == request_signed_values
    )
    assert str(protocol_messages["farming_info"]) == str(farming_info.to_json_dict())
    assert type(farming_info).from_json_dict(protocol_messages["farming_info"]) == farming_info
    assert str(protocol_messages["signed_values"]) == str(signed_values.to_json_dict())
    assert type(signed_values).from_json_dict(protocol_messages["signed_values"]) == signed_values
    assert str(protocol_messages["new_peak"]) == str(new_peak.to_json_dict())
    assert type(new_peak).from_json_dict(protocol_messages["new_peak"]) == new_peak
    assert str(protocol_messages["new_transaction"]) == str(new_transaction.to_json_dict())
    assert type(new_transaction).from_json_dict(protocol_messages["new_transaction"]) == new_transaction
    assert str(protocol_messages["request_transaction"]) == str(request_transaction.to_json_dict())
    assert type(request_transaction).from_json_dict(protocol_messages["request_transaction"]) == request_transaction
    assert str(protocol_messages["respond_transaction"]) == str(respond_transaction.to_json_dict())
    assert type(respond_transaction).from_json_dict(protocol_messages["respond_transaction"]) == respond_transaction
    assert str(protocol_messages["request_proof_of_weight"]) == str(request_proof_of_weight.to_json_dict())
    assert (
        type(request_proof_of_weight).from_json_dict(protocol_messages["request_proof_of_weight"])
        == request_proof_of_weight
    )
    assert str(protocol_messages["respond_proof_of_weight"]) == str(respond_proof_of_weight.to_json_dict())
    assert (
        type(respond_proof_of_weight).from_json_dict(protocol_messages["respond_proof_of_weight"])
        == respond_proof_of_weight
    )
    assert str(protocol_messages["request_block"]) == str(request_block.to_json_dict())
    assert type(request_block).from_json_dict(protocol_messages["request_block"]) == request_block
    assert str(protocol_messages["reject_block"]) == str(reject_block.to_json_dict())
    assert type(reject_block).from_json_dict(protocol_messages["reject_block"]) == reject_block
    assert str(protocol_messages["request_blocks"]) == str(request_blocks.to_json_dict())
    assert type(request_blocks).from_json_dict(protocol_messages["request_blocks"]) == request_blocks
    assert str(protocol_messages["respond_blocks"]) == str(respond_blocks.to_json_dict())
    assert type(respond_blocks).from_json_dict(protocol_messages["respond_blocks"]) == respond_blocks
    assert str(protocol_messages["reject_blocks"]) == str(reject_blocks.to_json_dict())
    assert type(reject_blocks).from_json_dict(protocol_messages["reject_blocks"]) == reject_blocks
    assert str(protocol_messages["respond_block"]) == str(respond_block.to_json_dict())
    assert type(respond_block).from_json_dict(protocol_messages["respond_block"]) == respond_block
    assert str(protocol_messages["new_unfinished_block"]) == str(new_unfinished_block.to_json_dict())
    assert type(new_unfinished_block).from_json_dict(protocol_messages["new_unfinished_block"]) == new_unfinished_block
    assert str(protocol_messages["request_unfinished_block"]) == str(request_unfinished_block.to_json_dict())
    assert (
        type(request_unfinished_block).from_json_dict(protocol_messages["request_unfinished_block"])
        == request_unfinished_block
    )
    assert str(protocol_messages["respond_unfinished_block"]) == str(respond_unfinished_block.to_json_dict())
    assert (
        type(respond_unfinished_block).from_json_dict(protocol_messages["respond_unfinished_block"])
        == respond_unfinished_block
    )
    assert str(protocol_messages["new_signage_point_or_end_of_subslot"]) == str(
        new_signage_point_or_end_of_subslot.to_json_dict()
    )
    assert (
        type(new_signage_point_or_end_of_subslot).from_json_dict(
            protocol_messages["new_signage_point_or_end_of_subslot"]
        )
        == new_signage_point_or_end_of_subslot
    )
    assert str(protocol_messages["request_signage_point_or_end_of_subslot"]) == str(
        request_signage_point_or_end_of_subslot.to_json_dict()
    )
    assert (
        type(request_signage_point_or_end_of_subslot).from_json_dict(
            protocol_messages["request_signage_point_or_end_of_subslot"]
        )
        == request_signage_point_or_end_of_subslot
    )
    assert str(protocol_messages["respond_signage_point"]) == str(respond_signage_point.to_json_dict())
    assert (
        type(respond_signage_point).from_json_dict(protocol_messages["respond_signage_point"]) == respond_signage_point
    )
    assert str(protocol_messages["respond_end_of_subslot"]) == str(respond_end_of_subslot.to_json_dict())
    assert (
        type(respond_end_of_subslot).from_json_dict(protocol_messages["respond_end_of_subslot"])
        == respond_end_of_subslot
    )
    assert str(protocol_messages["request_mempool_transaction"]) == str(request_mempool_transaction.to_json_dict())
    assert (
        type(request_mempool_transaction).from_json_dict(protocol_messages["request_mempool_transaction"])
        == request_mempool_transaction
    )
    assert str(protocol_messages["new_compact_vdf"]) == str(new_compact_vdf.to_json_dict())
    assert type(new_compact_vdf).from_json_dict(protocol_messages["new_compact_vdf"]) == new_compact_vdf
    assert str(protocol_messages["request_compact_vdf"]) == str(request_compact_vdf.to_json_dict())
    assert type(request_compact_vdf).from_json_dict(protocol_messages["request_compact_vdf"]) == request_compact_vdf
    assert str(protocol_messages["respond_compact_vdf"]) == str(respond_compact_vdf.to_json_dict())
    assert type(respond_compact_vdf).from_json_dict(protocol_messages["respond_compact_vdf"]) == respond_compact_vdf
    assert str(protocol_messages["request_peers"]) == str(request_peers.to_json_dict())
    assert type(request_peers).from_json_dict(protocol_messages["request_peers"]) == request_peers
    assert str(protocol_messages["respond_peers"]) == str(respond_peers.to_json_dict())
    assert type(respond_peers).from_json_dict(protocol_messages["respond_peers"]) == respond_peers
    assert str(protocol_messages["request_puzzle_solution"]) == str(request_puzzle_solution.to_json_dict())
    assert (
        type(request_puzzle_solution).from_json_dict(protocol_messages["request_puzzle_solution"])
        == request_puzzle_solution
    )
    assert str(protocol_messages["puzzle_solution_response"]) == str(puzzle_solution_response.to_json_dict())
    assert (
        type(puzzle_solution_response).from_json_dict(protocol_messages["puzzle_solution_response"])
        == puzzle_solution_response
    )
    assert str(protocol_messages["respond_puzzle_solution"]) == str(respond_puzzle_solution.to_json_dict())
    assert (
        type(respond_puzzle_solution).from_json_dict(protocol_messages["respond_puzzle_solution"])
        == respond_puzzle_solution
    )
    assert str(protocol_messages["reject_puzzle_solution"]) == str(reject_puzzle_solution.to_json_dict())
    assert (
        type(reject_puzzle_solution).from_json_dict(protocol_messages["reject_puzzle_solution"])
        == reject_puzzle_solution
    )
    assert str(protocol_messages["send_transaction"]) == str(send_transaction.to_json_dict())
    assert type(send_transaction).from_json_dict(protocol_messages["send_transaction"]) == send_transaction
    assert str(protocol_messages["transaction_ack"]) == str(transaction_ack.to_json_dict())
    assert type(transaction_ack).from_json_dict(protocol_messages["transaction_ack"]) == transaction_ack
    assert str(protocol_messages["new_peak_wallet"]) == str(new_peak_wallet.to_json_dict())
    assert type(new_peak_wallet).from_json_dict(protocol_messages["new_peak_wallet"]) == new_peak_wallet
    assert str(protocol_messages["request_block_header"]) == str(request_block_header.to_json_dict())
    assert type(request_block_header).from_json_dict(protocol_messages["request_block_header"]) == request_block_header
    assert str(protocol_messages["respond_header_block"]) == str(respond_header_block.to_json_dict())
    assert type(respond_header_block).from_json_dict(protocol_messages["respond_header_block"]) == respond_header_block
    assert str(protocol_messages["reject_header_request"]) == str(reject_header_request.to_json_dict())
    assert (
        type(reject_header_request).from_json_dict(protocol_messages["reject_header_request"]) == reject_header_request
    )
    assert str(protocol_messages["request_removals"]) == str(request_removals.to_json_dict())
    assert type(request_removals).from_json_dict(protocol_messages["request_removals"]) == request_removals
    assert str(protocol_messages["respond_removals"]) == str(respond_removals.to_json_dict())
    assert type(respond_removals).from_json_dict(protocol_messages["respond_removals"]) == respond_removals
    assert str(protocol_messages["reject_removals_request"]) == str(reject_removals_request.to_json_dict())
    assert (
        type(reject_removals_request).from_json_dict(protocol_messages["reject_removals_request"])
        == reject_removals_request
    )
    assert str(protocol_messages["request_additions"]) == str(request_additions.to_json_dict())
    assert type(request_additions).from_json_dict(protocol_messages["request_additions"]) == request_additions
    assert str(protocol_messages["respond_additions"]) == str(respond_additions.to_json_dict())
    assert type(respond_additions).from_json_dict(protocol_messages["respond_additions"]) == respond_additions
    assert str(protocol_messages["reject_additions"]) == str(reject_additions.to_json_dict())
    assert type(reject_additions).from_json_dict(protocol_messages["reject_additions"]) == reject_additions
    assert str(protocol_messages["request_header_blocks"]) == str(request_header_blocks.to_json_dict())
    assert (
        type(request_header_blocks).from_json_dict(protocol_messages["request_header_blocks"]) == request_header_blocks
    )
    assert str(protocol_messages["reject_header_blocks"]) == str(reject_header_blocks.to_json_dict())
    assert type(reject_header_blocks).from_json_dict(protocol_messages["reject_header_blocks"]) == reject_header_blocks
    assert str(protocol_messages["respond_header_blocks"]) == str(respond_header_blocks.to_json_dict())
    assert (
        type(respond_header_blocks).from_json_dict(protocol_messages["respond_header_blocks"]) == respond_header_blocks
    )
    assert str(protocol_messages["coin_state"]) == str(coin_state.to_json_dict())
    assert type(coin_state).from_json_dict(protocol_messages["coin_state"]) == coin_state
    assert str(protocol_messages["register_for_ph_updates"]) == str(register_for_ph_updates.to_json_dict())
    assert (
        type(register_for_ph_updates).from_json_dict(protocol_messages["register_for_ph_updates"])
        == register_for_ph_updates
    )
    assert str(protocol_messages["respond_to_ph_updates"]) == str(respond_to_ph_updates.to_json_dict())
    assert (
        type(respond_to_ph_updates).from_json_dict(protocol_messages["respond_to_ph_updates"]) == respond_to_ph_updates
    )
    assert str(protocol_messages["register_for_coin_updates"]) == str(register_for_coin_updates.to_json_dict())
    assert (
        type(register_for_coin_updates).from_json_dict(protocol_messages["register_for_coin_updates"])
        == register_for_coin_updates
    )
    assert str(protocol_messages["respond_to_coin_updates"]) == str(respond_to_coin_updates.to_json_dict())
    assert (
        type(respond_to_coin_updates).from_json_dict(protocol_messages["respond_to_coin_updates"])
        == respond_to_coin_updates
    )
    assert str(protocol_messages["coin_state_update"]) == str(coin_state_update.to_json_dict())
    assert type(coin_state_update).from_json_dict(protocol_messages["coin_state_update"]) == coin_state_update
    assert str(protocol_messages["request_children"]) == str(request_children.to_json_dict())
    assert type(request_children).from_json_dict(protocol_messages["request_children"]) == request_children
    assert str(protocol_messages["respond_children"]) == str(respond_children.to_json_dict())
    assert type(respond_children).from_json_dict(protocol_messages["respond_children"]) == respond_children
    assert str(protocol_messages["request_ses_info"]) == str(request_ses_info.to_json_dict())
    assert type(request_ses_info).from_json_dict(protocol_messages["request_ses_info"]) == request_ses_info
    assert str(protocol_messages["respond_ses_info"]) == str(respond_ses_info.to_json_dict())
    assert type(respond_ses_info).from_json_dict(protocol_messages["respond_ses_info"]) == respond_ses_info
    assert str(protocol_messages["pool_difficulty"]) == str(pool_difficulty.to_json_dict())
    assert type(pool_difficulty).from_json_dict(protocol_messages["pool_difficulty"]) == pool_difficulty
    assert str(protocol_messages["harvester_handhsake"]) == str(harvester_handhsake.to_json_dict())
    assert type(harvester_handhsake).from_json_dict(protocol_messages["harvester_handhsake"]) == harvester_handhsake
    assert str(protocol_messages["new_signage_point_harvester"]) == str(new_signage_point_harvester.to_json_dict())
    assert (
        type(new_signage_point_harvester).from_json_dict(protocol_messages["new_signage_point_harvester"])
        == new_signage_point_harvester
    )
    assert str(protocol_messages["new_proof_of_space"]) == str(new_proof_of_space.to_json_dict())
    assert type(new_proof_of_space).from_json_dict(protocol_messages["new_proof_of_space"]) == new_proof_of_space
    assert str(protocol_messages["request_signatures"]) == str(request_signatures.to_json_dict())
    assert type(request_signatures).from_json_dict(protocol_messages["request_signatures"]) == request_signatures
    assert str(protocol_messages["respond_signatures"]) == str(respond_signatures.to_json_dict())
    assert type(respond_signatures).from_json_dict(protocol_messages["respond_signatures"]) == respond_signatures
    assert str(protocol_messages["plot"]) == str(plot.to_json_dict())
    assert type(plot).from_json_dict(protocol_messages["plot"]) == plot
    assert str(protocol_messages["request_plots"]) == str(request_plots.to_json_dict())
    assert type(request_plots).from_json_dict(protocol_messages["request_plots"]) == request_plots
    assert str(protocol_messages["respond_plots"]) == str(respond_plots.to_json_dict())
    assert type(respond_plots).from_json_dict(protocol_messages["respond_plots"]) == respond_plots
    assert str(protocol_messages["request_peers_introducer"]) == str(request_peers_introducer.to_json_dict())
    assert (
        type(request_peers_introducer).from_json_dict(protocol_messages["request_peers_introducer"])
        == request_peers_introducer
    )
    assert str(protocol_messages["respond_peers_introducer"]) == str(respond_peers_introducer.to_json_dict())
    assert (
        type(respond_peers_introducer).from_json_dict(protocol_messages["respond_peers_introducer"])
        == respond_peers_introducer
    )
    assert str(protocol_messages["authentication_payload"]) == str(authentication_payload.to_json_dict())
    assert (
        type(authentication_payload).from_json_dict(protocol_messages["authentication_payload"])
        == authentication_payload
    )
    assert str(protocol_messages["get_pool_info_response"]) == str(get_pool_info_response.to_json_dict())
    assert (
        type(get_pool_info_response).from_json_dict(protocol_messages["get_pool_info_response"])
        == get_pool_info_response
    )
    assert str(protocol_messages["post_partial_payload"]) == str(post_partial_payload.to_json_dict())
    assert type(post_partial_payload).from_json_dict(protocol_messages["post_partial_payload"]) == post_partial_payload
    assert str(protocol_messages["post_partial_request"]) == str(post_partial_request.to_json_dict())
    assert type(post_partial_request).from_json_dict(protocol_messages["post_partial_request"]) == post_partial_request
    assert str(protocol_messages["post_partial_response"]) == str(post_partial_response.to_json_dict())
    assert (
        type(post_partial_response).from_json_dict(protocol_messages["post_partial_response"]) == post_partial_response
    )
    assert str(protocol_messages["get_farmer_response"]) == str(get_farmer_response.to_json_dict())
    assert type(get_farmer_response).from_json_dict(protocol_messages["get_farmer_response"]) == get_farmer_response
    assert str(protocol_messages["post_farmer_payload"]) == str(post_farmer_payload.to_json_dict())
    assert type(post_farmer_payload).from_json_dict(protocol_messages["post_farmer_payload"]) == post_farmer_payload
    assert str(protocol_messages["post_farmer_request"]) == str(post_farmer_request.to_json_dict())
    assert type(post_farmer_request).from_json_dict(protocol_messages["post_farmer_request"]) == post_farmer_request
    assert str(protocol_messages["post_farmer_response"]) == str(post_farmer_response.to_json_dict())
    assert type(post_farmer_response).from_json_dict(protocol_messages["post_farmer_response"]) == post_farmer_response
    assert str(protocol_messages["put_farmer_payload"]) == str(put_farmer_payload.to_json_dict())
    assert type(put_farmer_payload).from_json_dict(protocol_messages["put_farmer_payload"]) == put_farmer_payload
    assert str(protocol_messages["put_farmer_request"]) == str(put_farmer_request.to_json_dict())
    assert type(put_farmer_request).from_json_dict(protocol_messages["put_farmer_request"]) == put_farmer_request
    assert str(protocol_messages["put_farmer_response"]) == str(put_farmer_response.to_json_dict())
    assert type(put_farmer_response).from_json_dict(protocol_messages["put_farmer_response"]) == put_farmer_response
    assert str(protocol_messages["error_response"]) == str(error_response.to_json_dict())
    assert type(error_response).from_json_dict(protocol_messages["error_response"]) == error_response
    assert str(protocol_messages["new_peak_timelord"]) == str(new_peak_timelord.to_json_dict())
    assert type(new_peak_timelord).from_json_dict(protocol_messages["new_peak_timelord"]) == new_peak_timelord
    assert str(protocol_messages["new_unfinished_block_timelord"]) == str(new_unfinished_block_timelord.to_json_dict())
    assert (
        type(new_unfinished_block_timelord).from_json_dict(protocol_messages["new_unfinished_block_timelord"])
        == new_unfinished_block_timelord
    )
    assert str(protocol_messages["new_infusion_point_vdf"]) == str(new_infusion_point_vdf.to_json_dict())
    assert (
        type(new_infusion_point_vdf).from_json_dict(protocol_messages["new_infusion_point_vdf"])
        == new_infusion_point_vdf
    )
    assert str(protocol_messages["new_signage_point_vdf"]) == str(new_signage_point_vdf.to_json_dict())
    assert (
        type(new_signage_point_vdf).from_json_dict(protocol_messages["new_signage_point_vdf"]) == new_signage_point_vdf
    )
    assert str(protocol_messages["new_end_of_sub_slot_bundle"]) == str(new_end_of_sub_slot_bundle.to_json_dict())
    assert (
        type(new_end_of_sub_slot_bundle).from_json_dict(protocol_messages["new_end_of_sub_slot_bundle"])
        == new_end_of_sub_slot_bundle
    )
    assert str(protocol_messages["request_compact_proof_of_time"]) == str(request_compact_proof_of_time.to_json_dict())
    assert (
        type(request_compact_proof_of_time).from_json_dict(protocol_messages["request_compact_proof_of_time"])
        == request_compact_proof_of_time
    )
    assert str(protocol_messages["respond_compact_proof_of_time"]) == str(respond_compact_proof_of_time.to_json_dict())
    assert (
        type(respond_compact_proof_of_time).from_json_dict(protocol_messages["respond_compact_proof_of_time"])
        == respond_compact_proof_of_time
    )
