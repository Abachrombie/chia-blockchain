from __future__ import annotations

import asyncio
import logging
import sys
import time
from pathlib import Path
from random import Random
from typing import Any, Dict, List, Tuple

import pytest

from chia.data_layer.data_layer_util import Status
from chia.data_layer.data_store import DataStore
from chia.types.blockchain_format.sized_bytes import bytes32
from chia.util.byte_types import hexstr_to_bytes

log = logging.getLogger(__name__)

random = Random()
random.seed(100, version=2)

pytestmark = pytest.mark.data_layer

CADT_SampleValues = [
    "7b226c6162656c223a22477265656e2d65c2ae20436c696d617465205374616e6461726420456e646f7273656d656e742050686173652031222c226c6162656c54797065223a22456e646f7273656d656e74222c22637265646974696e67506572696f64537461727444617465223a22323030352d30362d30315430303a30303a30302e3730315a222c22637265646974696e67506572696f64456e6444617465223a22323031312d30352d33305432333a35393a35392e3730315a222c2276616c6964697479506572696f64537461727444617465223a22323030352d30312d30315430303a30383a30302e3730315a222c2276616c6964697479506572696f64456e6444617465223a22323031312d31322d33315432333a35393a35392e3730315a222c22756e69745175616e74697479223a313230302c226c6162656c4c696e6b223a2268747470733a2f2f7777772e677265656e2d652e6f72672f70726f6772616d732f636c696d617465222c226964223a2234383330646266352d343832302d343563342d396666372d643565613830623361343464222c226f7267556964223a2231613832303330366534663865646233643039343032613131383831343037373538303533633538623962666236353330303165396238343635653536336337222c2277617265686f75736550726f6a6563744964223a2235353038643437342d303036612d343561322d613963332d326166613864376631306437222c2270726f6a6563744964223a2235353038643437342d303036612d343561322d613963332d326166613864376631306437227d",
    "7b2272656c6174656450726f6a6563744964223a2254455354222c2272656c6174696f6e7368697054797065223a22506173697220526973205061726b20436f6e736572766174696f6e222c227265676973747279223a2253696e6761706f7265204e6174696f6e616c205265676973747279222c226964223a2263366637623337332d366664332d343433342d383061382d363739366461396266626433222c226f7267556964223a2231613832303330366534663865646233643039343032613131383831343037373538303533633538623962666236353330303165396238343635653536336337222c2277617265686f75736550726f6a6563744964223a2235353038643437342d303036612d343561322d613963332d326166613864376631306437222c2270726f6a6563744964223a2235353038643437342d303036612d343561322d613963332d326166613864376631306437227d",
    "7b22637265646974696e67506572696f645374617274223a22323032312d30362d30315430303a30303a30302e3730315a222c22637265646974696e67506572696f64456e64223a22323033312d30352d33305432333a35393a35392e3730315a222c22756e6974436f756e74223a32373030302c226964223a2234613264376439642d316433642d346337642d383733352d356264313964663632353635222c226f7267556964223a2231613832303330366534663865646233643039343032613131383831343037373538303533633538623962666236353330303165396238343635653536336337222c2277617265686f75736550726f6a6563744964223a2235353038643437342d303036612d343561322d613963332d326166613864376631306437222c2270726f6a6563744964223a2235353038643437342d303036612d343561322d613963332d326166613864376631306437227d",
    "7b226f726967696e50726f6a6563744964223a224849204541524c222c2270726f6a6563744964223a2263396431343765322d626330372d346536382d613736642d343334323466613863643465222c2272656769737472794f664f726967696e223a2274657374222c2270726f6772616d223a2274657374222c2270726f6a6563744e616d65223a2274657374222c2270726f6a6563744c696e6b223a2268747470733a2f2f7777772e6e61747572652e636f6d2f61727469636c65732f7334313436372d3032312d32313536302d32222c2270726f6a656374446576656c6f706572223a224e5061726b73204e6174696f6e616c2042696f6469766572736974792043656e7472652c204e6174696f6e616c205061726b7320426f6172642c20526964676576696577205265736964656e7469616c20436f6c6c656765222c22736563746f72223a225472616e73706f7274222c2270726f6a65637454797065223a224f7267616e696320576173746520436f6d706f7374696e67222c2270726f6a65637454616773223a225765746c616e64732c205265666f726573746174696f6e2c204d696c6c696f6e207472656573222c22636f766572656442794e4443223a22496e73696465204e4443222c226e6463496e666f726d6174696f6e223a2254686520726573746f726174696f6e20616e6420636f6e736572766174696f6e2070726f6a656374206469726563746c7920616c69676e7320746f207468652053696e6761706f7265616e204e444320676f616c7320746f206361707475726520312c3030302c30303020746f6e73206f6620636172626f6e20627920323035302e20546869732070726f6a65637420726570726573656e747320616e20657374696d6174656420636f6e747269627574696f6e206f662032372520746f776172647320746865204e44432e222c2270726f6a656374537461747573223a2252656769737465726564222c2270726f6a65637453746174757344617465223a22323032322d30312d33315430303a30353a34352e3730315a222c22756e69744d6574726963223a2274434f3265222c226d6574686f646f6c6f6779223a225265636f7665727920616e64207574696c697a6174696f6e206f66206761732066726f6d206f696c206669656c6473207468617420776f756c64206f746865727769736520626520666c61726564206f722076656e746564202d2d2d2056657273696f6e20372e30222c2276616c69646174696f6e426f6479223a2253435320476c6f62616c205365727669636573222c2276616c69646174696f6e44617465223a22323032312d30362d30315431373a30303a34352e3730315a222c2277617265686f75736550726f6a6563744964223a2235353038643437342d303036612d343561322d613963332d326166613864376631306437222c2274696d65537461676564223a313638363738303432352c226f7267556964223a2231613832303330366534663865646233643039343032613131383831343037373538303533633538623962666236353330303165396238343635653536336337227d",
    "7b226c6162656c223a22477265656e2d65c2ae20436c696d617465205374616e6461726420456e646f7273656d656e742050686173652033222c226c6162656c54797065223a22456e646f7273656d656e74222c22637265646974696e67506572696f64537461727444617465223a22323032312d30362d30315430303a30303a30302e3730315a222c22637265646974696e67506572696f64456e6444617465223a22323033312d30352d33305432333a35393a35392e3730315a222c2276616c6964697479506572696f64537461727444617465223a22323032312d30312d30315430303a30383a30302e3730315a222c2276616c6964697479506572696f64456e6444617465223a22323032352d31322d33315432333a35393a35392e3730315a222c22756e69745175616e74697479223a313230302c226c6162656c4c696e6b223a2268747470733a2f2f7777772e677265656e2d652e6f72672f70726f6772616d732f636c696d617465222c226964223a2237643665326466662d386631392d346134372d613631652d323733653166633434353962222c226f7267556964223a2231613832303330366534663865646233643039343032613131383831343037373538303533633538623962666236353330303165396238343635653536336337222c2277617265686f75736550726f6a6563744964223a2235353038643437342d303036612d343561322d613963332d326166613864376631306437222c2270726f6a6563744964223a2235353038643437342d303036612d343561322d613963332d326166613864376631306437227d",
    "7b22726174696e6754797065223a2243435149222c22726174696e6752616e676548696768657374223a2241222c22726174696e6752616e67654c6f77657374223a225a222c22726174696e67223a2247222c22726174696e674c696e6b223a2268747470733a2f2f7777772e6364702e6e65742f656e2f6369746965732f6369746965732d73636f726573222c226964223a2238656563653935382d326532382d346334642d383635312d303162633330616437333234222c226f7267556964223a2231613832303330366534663865646233643039343032613131383831343037373538303533633538623962666236353330303165396238343635653536336337222c2277617265686f75736550726f6a6563744964223a2235353038643437342d303036612d343561322d613963332d326166613864376631306437222c2270726f6a6563744964223a2235353038643437342d303036612d343561322d613963332d326166613864376631306437227d",
    "7b22737461727444617465223a22323032312d30322d30315430303a30303a30302e3730315a222c22656e6444617465223a22323032322d30322d30315430303a30303a30302e3730315a222c22766572696669636174696f6e417070726f616368223a2241746d6f73706572696320636172626f6e2064696f78696465206d6561737572656d656e7473222c22766572696669636174696f6e5265706f727444617465223a22323032322d30312d30315430383a30303a30302e3730315a222c22766572696669636174696f6e426f6479223a224e41534120434d53222c226964223a2232383566393736632d666138342d346531632d393530352d346661313839383030356332222c226f7267556964223a2231613832303330366534663865646233643039343032613131383831343037373538303533633538623962666236353330303165396238343635653536336337222c2277617265686f75736550726f6a6563744964223a2235353038643437342d303036612d343561322d613963332d326166613864376631306437222c2270726f6a6563744964223a2235353038643437342d303036612d343561322d613963332d326166613864376631306437227d",
    "7b22636f62656e65666974223a2242696f646976657273697479207468726f75676820706c616e74696e6720612076617269657479206f6620747265657320746861742061726520686f6d6520746f206d616e79206e61746976652053696e6761706f7265616e2073706563696573222c226964223a2263343233656339642d633764352d346630622d616665312d376138376333376463346464222c226f7267556964223a2231613832303330366534663865646233643039343032613131383831343037373538303533633538623962666236353330303165396238343635653536336337222c2277617265686f75736550726f6a6563744964223a2235353038643437342d303036612d343561322d613963332d326166613864376631306437222c2270726f6a6563744964223a2235353038643437342d303036612d343561322d613963332d326166613864376631306437227d",
    "7b226c6162656c223a22477265656e2d65c2ae20436c696d617465205374616e6461726420456e646f7273656d656e742050686173652032222c226c6162656c54797065223a22456e646f7273656d656e74222c22637265646974696e67506572696f64537461727444617465223a22323031312d30362d30315430303a30303a30302e3730315a222c22637265646974696e67506572696f64456e6444617465223a22323031352d30352d33305432333a35393a35392e3730315a222c2276616c6964697479506572696f64537461727444617465223a22323031312d30312d30315430303a30383a30302e3730315a222c2276616c6964697479506572696f64456e6444617465223a22323031352d31322d33315432333a35393a35392e3730315a222c22756e69745175616e74697479223a313230302c226c6162656c4c696e6b223a2268747470733a2f2f7777772e677265656e2d652e6f72672f70726f6772616d732f636c696d617465222c226964223a2239383534323362382d303431302d343832382d386563662d383630633636666333326464222c226f7267556964223a2231613832303330366534663865646233643039343032613131383831343037373538303533633538623962666236353330303165396238343635653536336337222c2277617265686f75736550726f6a6563744964223a2235353038643437342d303036612d343561322d613963332d326166613864376631306437222c2270726f6a6563744964223a2235353038643437342d303036612d343561322d613963332d326166613864376631306437227d",
    "7b22636f756e747279223a225396e6761706f7265222c22696e436f756e747279526567696f6e223a224e2f41222c2267656f677261706869634964656e746966696572223a2231c2b03236e280b23436e280b34e20313033c2b03433e280b23434e280b345222c226964223a2237616130346133322d363663392d343561662d623931362d373736323835663265353437222c226f7267556964223a22316",
]


def gen_cadt_record() -> List[Tuple[str, str]]:
    ret = []

    for value in CADT_SampleValues:
        key = random.getrandbits(256).to_bytes(32, byteorder="big").hex()
        ret.append((key, value))

    return ret

@pytest.mark.benchmark
@pytest.mark.parametrize("num_cadt_records", [1, 10, 25, 50, 100, 500, 1000, 2000, 5000, 10000, 20000])
@pytest.mark.asyncio
async def test_autoinsert_speed(tree_id: bytes32, tmp_path: Path, num_cadt_records: int) -> None:
    changelist: List[Dict[str, Any]] = []

    db: Path = tmp_path / "test.db"
    data_store = await DataStore.create(database=db, uri=False)

    await data_store.create_tree(tree_id=tree_id, status=Status.COMMITTED)

    for _ in range(num_cadt_records):
        cadt_record = gen_cadt_record()

        for key, value in cadt_record:
            changelist.append({"action": "insert", "key": hexstr_to_bytes(key), "value": hexstr_to_bytes(value)})

    t1 = time.monotonic()
    await data_store.insert_batch(tree_id=tree_id, changelist=changelist, status=Status.COMMITTED)
    t2 = time.monotonic()

    print(f"total keys: {len(changelist)}")
    print(f"insert_batch time: {t2 - t1}")
    print(f"insert_batch time per key: {(t2-t1) / len(changelist)}")

    final_key = hexstr_to_bytes(random.getrandbits(256).to_bytes(32, byteorder="big").hex())
    final_value = hexstr_to_bytes("0xdeadbeef")

    # t1 = time.monotonic()
    # await data_store.autoinsert(key=final_key, value=final_value, tree_id=tree_id, hint_keys_values={}, use_optimized=True, status=Status.COMMITTED)
    # t2 = time.monotonic()

    # print(f"last key autoinsert time: {t2 - t1}")
    
    data = await data_store.get_keys_values_dict(tree_id=tree_id)
    for change in changelist:
        key = change["key"]
        value = change["value"]
        assert data[key] == value

    await data_store.close()


async def create_10k_db() -> None:
    changelist: List[Dict[str, Any]] = []

    base = b"a tree id"
    pad = b"." * (32 - len(base))
    tree_id = bytes32(pad + base)

    db: Path = Path("C://users//elowe//10k.db")
    data_store = await DataStore.create(database=db, uri=False)

    await data_store.create_tree(tree_id=tree_id, status=Status.COMMITTED)

    for _ in range(1000):
        cadt_record = gen_cadt_record()

        for key, value in cadt_record:
            changelist.append({"action": "insert", "key": hexstr_to_bytes(key), "value": hexstr_to_bytes(value)})

    await data_store.insert_batch(tree_id=tree_id, changelist=changelist, status=Status.COMMITTED)
    
    await data_store.close()

async def one_insert() -> None:
    changelist: List[Dict[str, Any]] = []

    base = b"a tree id"
    pad = b"." * (32 - len(base))
    tree_id = bytes32(pad + base)

    db_log = Path("C://users//elowe//insert-1.log")
    db: Path = Path("C://users/elowe//10k.db")
    data_store = await DataStore.create(database=db, uri=False, log_path=db_log)

    random.seed(14565883)
    final_key = hexstr_to_bytes(random.getrandbits(256).to_bytes(32, byteorder="big").hex())
    final_value = hexstr_to_bytes("0xdeadbeef")

    changelist.append({"action": "insert", "key": final_key, "value": final_value})

    await data_store.insert_batch(tree_id=tree_id, changelist=changelist, status=Status.COMMITTED)
    
    await data_store.close()

async def one_insert_new_db() -> None:
    changelist: List[Dict[str, Any]] = []

    base = b"a tree id"
    pad = b"." * (32 - len(base))
    tree_id = bytes32(pad + base)

    db_log = Path("C://users//elowe//insert-1-new.log")
    db: Path = Path("C://users/elowe//new.db")
    data_store = await DataStore.create(database=db, uri=False, log_path=db_log)
    await data_store.create_tree(tree_id=tree_id, status=Status.COMMITTED)

    random.seed(14565883)
    final_key = hexstr_to_bytes(random.getrandbits(256).to_bytes(32, byteorder="big").hex())
    final_value = hexstr_to_bytes("0xdeadbeef")

    changelist.append({"action": "insert", "key": final_key, "value": final_value})

    await data_store.insert_batch(tree_id=tree_id, changelist=changelist, status=Status.COMMITTED)
    
    await data_store.close()

def main(func_to_run: str) -> None:
    asyncio.run(globals()[sys.argv[1]]())

if __name__ == '__main__':
    main(sys.argv[1])
