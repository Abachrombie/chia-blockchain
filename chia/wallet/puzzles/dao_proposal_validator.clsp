(mod
  (
    SINGLETON_STRUCT  ; (SINGLETON_MOD_HASH (SINGLETON_ID . LAUNCHER_PUZZLE_HASH))
    PROPOSAL_MOD_HASH
    PROPOSAL_TIMER_MOD_HASH
    CAT_MOD_HASH
    LOCKUP_MOD_HASH
    TREASURY_MOD_HASH
    CAT_TAIL_HASH
    PROPOSAL_MINIMUM_AMOUNT
    Attendance_Required  ; this is passed in as a Truth from above
    Pass_Margin  ; this is a pass in as a Truth from above
    (announcement_source delegated_puzzle_hash announcement_args)
    (  ; this is the proposal_vaidator solution
      proposal_id
      total_votes
      yes_votes
      coin_parent
      coin_amount
    )
    conditions
  )

  (include condition_codes.clib)
  (include curry-and-treehash.clib)
  (include utility_macros.clib)

  (defconstant TEN_THOUSAND 10000)

  (defun-inline calculate_win_percentage (TOTAL PERCENTAGE)
    (f (divmod (* TOTAL PERCENTAGE) TEN_THOUSAND))
  )

  (defun-inline calculate_full_puzzle_hash (SINGLETON_STRUCT inner_puzzle_hash)
    (puzzle-hash-of-curried-function (f SINGLETON_STRUCT)
      inner_puzzle_hash
      (sha256tree SINGLETON_STRUCT)
    )
  )

  (defun-inline calculate_proposal_puzzle (
      PROPOSAL_MOD_HASH
      PROPOSAL_SINGLETON_STRUCT
      PROPOSAL_TIMER_MOD_HASH
      CAT_MOD_HASH
      TREASURY_MOD_HASH
      LOCKUP_MOD_HASH
      CAT_TAIL_HASH
      TREASURY_ID
      proposal_yes_votes
      proposal_total_votes
      proposal_innerpuz_hash
    )
    (puzzle-hash-of-curried-function PROPOSAL_MOD_HASH
      (sha256 ONE proposal_innerpuz_hash)
      (sha256 ONE proposal_total_votes)
      (sha256 ONE proposal_yes_votes)
      (sha256 ONE TREASURY_ID)
      (sha256 ONE CAT_TAIL_HASH)
      (sha256 ONE LOCKUP_MOD_HASH)
      (sha256 ONE TREASURY_MOD_HASH)
      (sha256 ONE CAT_MOD_HASH)
      (sha256 ONE PROPOSAL_TIMER_MOD_HASH)
      (sha256 ONE PROPOSAL_MOD_HASH)
      (sha256tree PROPOSAL_SINGLETON_STRUCT)
    )
  )

  (defun assert_recreating_self (SINGLETON_STRUCT conditions)
    (if conditions
        (c
          (f conditions)
          (if (= (f (f conditions)) CREATE_COIN)
              (if (logand (f (r (r (f conditions)))) 1)
                  (c
                    (list ASSERT_MY_PUZZLEHASH (calculate_full_puzzle_hash SINGLETON_STRUCT (f (r (f conditions)))))
                    (assert_recreating_self SINGLETON_STRUCT (r conditions))
                  )
                  (assert_recreating_self SINGLETON_STRUCT (r conditions))
              )
              (assert_recreating_self SINGLETON_STRUCT (r conditions))
          )
        )
        ()
    )
  )

  (defun check_update_conditions (SINGLETON_STRUCT conditions)
    (if conditions
        (if (= (f (f conditions)) CREATE_COIN)
            (c
              ; Proposal updates should only have one CREATE_COIN condition with an even amount
              ; If there are > 1 CREATE_COIN conditions then ASSERT_MY_AMOUNT will fail
              ; If the amount is even then the singleton top layer will fail.
              (list ASSERT_MY_AMOUNT (f (r (r (f conditions)))))
              (c (f conditions) (check_update_conditions SINGLETON_STRUCT (r conditions)))
            )
            (if
              (any  ; block both types of announcement in the update case
                (= (f (f conditions)) CREATE_COIN_ANNOUNCEMENT)
                (= (f (f conditions)) CREATE_PUZZLE_ANNOUNCEMENT)
              )
              (x)  ; fail
              (c (f conditions) (check_update_conditions SINGLETON_STRUCT (r conditions)))
            )
        )
        ; success: return all the conditions
        ()
    )
  )

  (defun-inline check_dangerous_conditions (SINGLETON_STRUCT conditions)
    conditions
  )

  (assert
    ; (= (sha256tree my_solution) announcement_args) - quex suggested this. We don't need to check it now. Can be used for future functionality.
    (> (+ coin_amount ONE) PROPOSAL_MINIMUM_AMOUNT)  ; >=
    (> total_votes Attendance_Required)  ; TODO: we might want to change this to storing total cats and calculating like with yes votes
    (> yes_votes (calculate_win_percentage total_votes Pass_Margin))
    (=
      announcement_source
      (calculate_coin_id
        coin_parent
        (calculate_full_puzzle_hash
          (c (f SINGLETON_STRUCT) (c proposal_id (r (r SINGLETON_STRUCT))))
          (calculate_proposal_puzzle
            PROPOSAL_MOD_HASH
            (c (f SINGLETON_STRUCT) (c proposal_id (r (r SINGLETON_STRUCT))))
            PROPOSAL_TIMER_MOD_HASH
            CAT_MOD_HASH
            TREASURY_MOD_HASH
            LOCKUP_MOD_HASH
            CAT_TAIL_HASH
            (f (r SINGLETON_STRUCT))
            yes_votes  ; this is where we validate the yes votes and total votes
            total_votes
            delegated_puzzle_hash
          )
        )
        coin_amount
      )
    )
    conditions
  )
)
