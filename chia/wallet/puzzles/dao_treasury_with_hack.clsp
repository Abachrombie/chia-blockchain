(mod
  (
    TREASURY_MOD_HASH
    DAO_CAT_LAUNCHER_PUZHASH  ; this is the pre-curryed dao cat launcher
    MINT_PUZHASH
    PROPOSAL_VALIDATOR  ; this is the curryed proposal validator
    PROPOSAL_LENGTH
    PROPOSAL_SOFTCLOSE_LENGTH
    CURRENT_CAT_ISSUANCE
    ATTENDANCE_REQUIRED  ; this is a percentage of current_cat_issuance
    PASS_MARGIN  ; this is a percentage 0 - 10,000 - 51% would be 5100
    PROPOSAL_SELF_DESTRUCT_TIME  ; time in seconds after which proposals can be automatically closed
    ORACLE_SPEND_DELAY  ; timelock delay for oracle spend
    proposal_flag  ; if this is set then we are closing a proposal
    (@ proposal_announcement (announcement_source delegated_puzzle_hash announcement_args spend_or_update_flag))
    proposal_validator_solution
    delegated_puzzle_reveal  ; this is the reveal of the puzzle announced by the proposal
    delegated_solution  ; this is not secure unless the delegated puzzle secures it
    my_singleton_struct
  )
  (include utility_macros.clib)
  (include condition_codes.clib)
  (include curry-and-treehash.clib)

  (defun-inline recreate_self (
      TREASURY_MOD_HASH
      DAO_CAT_LAUNCHER_PUZHASH  ; this is the pre-curryed dao cat launcher
      MINT_PUZHASH
      PROPOSAL_VALIDATOR  ; this is the curryed proposal validator
      PROPOSAL_LENGTH
      PROPOSAL_SOFTCLOSE_LENGTH
      CURRENT_CAT_ISSUANCE
      ATTENDANCE_REQUIRED  ; this is a percentage of current_cat_issuance
      PASS_MARGIN  ; this is a percentage 0 - 10,000 - 51% would be 5100
      PROPOSAL_SELF_DESTRUCT_TIME  ; time in seconds after which proposals can be automatically closed
      ORACLE_SPEND_DELAY  ; timelock delay for oracle spend
    )
    (puzzle-hash-of-curried-function TREASURY_MOD_HASH
      (sha256 ONE ORACLE_SPEND_DELAY)
      (sha256 ONE PROPOSAL_SELF_DESTRUCT_TIME)
      (sha256 ONE PASS_MARGIN)
      (sha256 ONE ATTENDANCE_REQUIRED)
      (sha256 ONE CURRENT_CAT_ISSUANCE)
      (sha256 ONE PROPOSAL_SOFTCLOSE_LENGTH)
      (sha256 ONE PROPOSAL_LENGTH)
      (sha256tree PROPOSAL_VALIDATOR)
      (sha256 ONE MINT_PUZHASH)
      (sha256 ONE DAO_CAT_LAUNCHER_PUZHASH)
      (sha256 ONE TREASURY_MOD_HASH)
    )
  )

  (defun calculate_singleton_puzzle_hash (SINGLETON_STRUCT inner_puzzle_hash)
    (puzzle-hash-of-curried-function (f SINGLETON_STRUCT)
      inner_puzzle_hash
      (sha256tree SINGLETON_STRUCT)
    )
  )

  (defun stager (DAO_CAT_LAUNCHER_PUZHASH CURRENT_CAT_ISSUANCE MINT_PUZHASH ORACLE_SPEND_DELAY my_inner_puzhash singleton_struct)
    (c
      (list CREATE_COIN my_inner_puzhash ONE)
      (if singleton_struct  ; this is the eve spend
          (list
            (list ASSERT_MY_COIN_ID
              (sha256
                (f (r singleton_struct))  ; this asserts our parent is the launcher coin
                (calculate_singleton_puzzle_hash singleton_struct my_inner_puzhash)
                ONE
              )
            )
            (list CREATE_COIN DAO_CAT_LAUNCHER_PUZHASH CURRENT_CAT_ISSUANCE)
            (list CREATE_COIN_ANNOUNCEMENT MINT_PUZHASH)
          )
          (list (list ASSERT_HEIGHT_RELATIVE ORACLE_SPEND_DELAY))
      )
    )
  )

  (if proposal_flag
      ; if we're checking a proposal (testing if it has passed)
      (if (= (sha256tree delegated_puzzle_reveal) delegated_puzzle_hash)
          ; Merge the treasury conditions with the proposal validator conditions
          ; If the update case then the validator returns the new treasury create coin
          ; If the spend case then we need to recreate the treasury outselves
          ; treasury specific conditions
          (c
            (list CREATE_PUZZLE_ANNOUNCEMENT (f proposal_validator_solution))  ; specify the proposal we're talking about
            (c
              ; also announce the oracle info so proposals can close if treasury is being spammed
              (list CREATE_PUZZLE_ANNOUNCEMENT 0)  ; the arguments are secured implicitly in the puzzle of the treasury
              (c
                (list ASSERT_PUZZLE_ANNOUNCEMENT (sha256 announcement_source (sha256tree (list delegated_puzzle_hash announcement_args))))  ; announcement source is validated inside the ProposalValidator
                (a
                  PROPOSAL_VALIDATOR
                  (list
                    ATTENDANCE_REQUIRED
                    PASS_MARGIN
                    proposal_announcement
                    proposal_validator_solution
                    (a delegated_puzzle_reveal delegated_solution)
                  )
                )
              )
            )
          )
          (x)
      )
      ; no proposal_flag so create the oracle announcement
      (c
        ; add announcement attendance required
        (list CREATE_PUZZLE_ANNOUNCEMENT 0)  ; the arguments are secured implicitly in the puzzle of the treasury
        (stager
          DAO_CAT_LAUNCHER_PUZHASH
          CURRENT_CAT_ISSUANCE
          MINT_PUZHASH
          ORACLE_SPEND_DELAY
          (recreate_self
            TREASURY_MOD_HASH
            DAO_CAT_LAUNCHER_PUZHASH  ; this is the pre-curryed dao cat launcher
            MINT_PUZHASH
            PROPOSAL_VALIDATOR  ; this is the curryed proposal validator
            PROPOSAL_LENGTH
            PROPOSAL_SOFTCLOSE_LENGTH
            CURRENT_CAT_ISSUANCE
            ATTENDANCE_REQUIRED  ; this is a percentage of current_cat_issuance
            PASS_MARGIN  ; this is a percentage 0 - 10,000 - 51% would be 5100
            PROPOSAL_SELF_DESTRUCT_TIME  ; time in seconds after which proposals can be automatically closed
            ORACLE_SPEND_DELAY  ; timelock delay for oracle spend
          )
          my_singleton_struct
        )
      )
  )
)
