(mod
  (
    SINGLETON_STRUCT  ; (SINGLETON_MOD_HASH (SINGLETON_ID . LAUNCHER_PUZZLE_HASH))
    PROPOSAL_MOD_HASH
    PROPOSAL_TIMER_MOD_HASH
    CAT_MOD_HASH
    LOCKUP_MOD_HASH
    TREASURY_MOD_HASH
    CAT_TAIL_HASH
    SAFE_PAYMENT_MOD_HASH
    attendance_required
    pass_margin  ; this is a percentage 0 - 10,000 - 51% would be 5100
    (announcement_source delegated_puzzle_hash announcement_args spend_or_update_flag)
    (
      proposal_id
      total_votes
      yes_votes
      spend_amount
    )
    conditions
  )

  (include condition_codes.clvm)
  (include curry-and-treehash.clinc)
  (include utility_macros.clib)

  (defmacro assert_or_nil items
      (if (r items)
          (list if (f items) (c assert (r items)) (q . ()))
          (f items)
      )
  )

  (defconstant TEN_THOUSAND 10000)

  (defun-inline calculate_win_percentage (TOTAL PERCENTAGE)
    (f (divmod (* TOTAL PERCENTAGE) TEN_THOUSAND))
  )

  (defun-inline calculate_full_puzzle_hash (SINGLETON_STRUCT inner_puzzle_hash)
     (puzzle-hash-of-curried-function (f SINGLETON_STRUCT)
                                      inner_puzzle_hash
                                      (sha256tree SINGLETON_STRUCT)
     )
  )

  (defun-inline calculate_proposal_puzzle (
    PROPOSAL_MOD_HASH
    PROPOSAL_SINGLETON_STRUCT
    PROPOSAL_TIMER_MOD_HASH
    CAT_MOD_HASH
    TREASURY_MOD_HASH
    LOCKUP_MOD_HASH
    CAT_TAIL_HASH
    TREASURY_ID
    proposal_yes_votes
    proposal_total_votes
    spend_or_update_flag
    proposal_innerpuz
    )
    (puzzle-hash-of-curried-function PROPOSAL_MOD_HASH
                                     (sha256tree proposal_innerpuz)
                                     (sha256 ONE spend_or_update_flag)
                                     (sha256 ONE proposal_total_votes)
                                     (sha256 ONE proposal_yes_votes)
                                     (sha256 ONE TREASURY_ID)
                                     (sha256 ONE CAT_TAIL_HASH)
                        				     (sha256 ONE LOCKUP_MOD_HASH)
                        				     (sha256 ONE TREASURY_MOD_HASH)
                                     (sha256 ONE CAT_MOD_HASH)
                                     (sha256 ONE PROPOSAL_TIMER_MOD_HASH)
                                     (sha256 ONE PROPOSAL_MOD_HASH)
                                     (sha256tree PROPOSAL_SINGLETON_STRUCT)
    )
  )

  (defun-inline calculate_safe_payment_hash (
    SAFE_PAYMENT_MOD_HASH
    SINGLETON_STRUCT
    conditions
    spend_amount
    )
    (puzzle-hash-of-curried-function SAFE_PAYMENT_MOD_HASH
				     (sha256 ONE spend_amount)
				     (sha256tree conditions)
				     (sha256tree SINGLETON_STRUCT)
    )
  )


  (defun check_spend_conditions (SAFE_PAYMENT_MOD_HASH SINGLETON_STRUCT conditions delegated_puzzle_hash spend_amount)
    ; Check that the delegated_puzzle_hash is equal to the curried safe_spend_mod_hash
    ; pass through the conditions if it is
    (assert
      (= delegated_puzzle_hash
         (calculate_safe_payment_hash SAFE_PAYMENT_MOD_HASH SINGLETON_STRUCT (r (r (r conditions))) spend_amount))
      conditions
    )

  )

  (defun check_update_conditions (SINGLETON_STRUCT conditions output)
    (if conditions
      (if (= (f (f conditions)) CREATE_COIN)
        (c
      	  ; Proposal updates should only have one CREATE_COIN condition with an even amount
      	  ; If there are > 1 CREATE_COIN conditions then ASSERT_MY_AMOUNT will fail
      	  ; If the amount is even then the singleton top layer will fail.
      	  (list ASSERT_MY_AMOUNT (f (r (r (f conditions)))))
      	  (check_update_conditions SINGLETON_STRUCT (r conditions) 1 (c (f conditions) output))
      	)
      	(if
      	  (any ; block both types of announcement in the update case
      	    (= (f (f conditions)) CREATE_COIN_ANNOUNCEMENT)
      	    (= (f (f conditions)) CREATE_PUZZLE_ANNOUNCEMENT)
      	  )
      	  ()  ; fail
      	  (check_update_conditions SINGLETON_STRUCT (r conditions) spend_or_update_flag seen_flag (c (f conditions) output))
      	)
      )
      ; success: return all the conditions
      output
    )
  )

  (defun check_dangerous_conditions (SINGLETON_STRUCT conditions)
     conditions
  )

  (assert_or_nil
    ; (= (sha256tree my_solution) announcement_args) - quex suggested this. We don't need to check it now. Can be used for future functionality.
    (> total_votes ATTENDANCE_REQUIRED)  ; TODO: we might want to change this to storing total cats and calculating like below
    (> yes_votes (calculate_win_percentage total_votes PASS_MARGIN))
    (=
      announcement_source
      (calculate_full_puzzle_hash
        (c (f SINGLETON_STRUCT) (c proposal_id (r (r SINGLETON_STRUCT))))
        (calculate_proposal_puzzle
          PROPOSAL_MOD_HASH
          (c (f SINGLETON_STRUCT) (c proposal_id (r (r SINGLETON_STRUCT))))
          PROPOSAL_TIMER_MOD_HASH
          CAT_MOD_HASH
          TREASURY_MOD_HASH
          LOCKUP_MOD_HASH
          CAT_TAIL_HASH
          (f (r SINGLETON_STRUCT))
          yes_votes  ; this is where we validate the yes votes and total votes
          total_votes
          spend_or_update_flag
          delegated_puzzle_hash
        )
      )
    )
    ; then execute the check method depending on whether we're in spend, update, or dangerous mode
    (if (= spend_or_update_flag "s")
      (check_spend_conditions SAFE_PAYMENT_MOD_HASH SINGLETON_STRUCT conditions delegated_puzzle_hash spend_amount)
      (if (= spend_or_update_flag "u")
        (check_update_conditions SINGLETON_STRUCT conditions ())
      	(if (= spend_or_update_flag "d")
      	  (check_dangerous_conditions SINGLETON_STRUCT conditions)
      	  ()
      	)
      )
    )
  )
)
