(mod (
  PROPOSAL_MOD_HASH
  SINGLETON_MOD_HASH
  SINGLETON_LAUNCHER_PUZHASH
  LOCKUP_MOD_HASH
  CAT_MOD_HASH
  CAT_TAIL
  PREVIOUS_VOTES
  LOCKUP_TIME
  PUBKEY
  my_id  ; if my_id is 0 we do the return to return_address (exit voting mode) spend case
  my_amount
  new_proposal_vote_id_or_return_address
  vote_info
  proposal_curry_vals
)
  (include condition_codes.clvm)
  (include curry-and-treehash.clinc)

  (defun check_not_previously_voted (SINGLETON_MOD_HASH SINGLETON_LAUNCHER CAT_MOD_HASH CAT_TAIL PROPOSAL_MOD_HASH my_id my_amount message new_vote_id previous_votes proposal_curry_vals)
    (if previous_votes
      (if (= new_vote_id (f previous_votes))
        (x)
        (check_not_previously_voted SINGLETON_MOD_HASH SINGLETON_LAUNCHER CAT_MOD_HASH CAT_TAIL PROPOSAL_MOD_HASH my_id my_amount message new_vote_id (r previous_votes) proposal_curry_vals)
      )
      (list
        (list
          CREATE_COIN
          (calculate_lockup_puzzlehash PROPOSAL_MOD_HASH SINGLETON_MOD_HASH SINGLETON_LAUNCHER_PUZHASH LOCKUP_MOD_HASH EPHEMERAL_VOTE_MODHASH CAT_MOD_HASH CAT_TAIL LOCKUP_TIME (c new_vote_id previous_votes) pubkey)
          my_amount
        )
        (list ASSERT_PUZZLE_ANNOUNCEMENT (sha256
            (calculate_proposal_puzzlehash PROPOSAL_MOD_HASH CAT_MOD_HASH EPHEMERAL_VOTE_MODHASH CAT_TAIL (c SINGLETON_MOD_HASH (c new_vote_id SINGLETON_LAUNCHER_PUZHASH)) proposal_curry_vals)
            my_id
          )
        )
        (list CREATE_PUZZLE_ANNOUNCEMENT message)
      )
    )
  )

  (defun calculate_singleton_puzzle_hash (PROPOSAL_SINGLETON_STRUCT inner_puzzle_hash)
     (puzzle-hash-of-curried-function (f PROPOSAL_SINGLETON_STRUCT)
                                      inner_puzzle_hash
                                      (sha256tree PROPOSAL_SINGLETON_STRUCT)
     )
  )
(defun calculate_proposal_puzzlehash (
    PROPOSAL_MOD_HASH
    CAT_MOD_HASH
    EPHEMERAL_VOTE_MODHASH
    CAT_TAIL
    proposal_singleton_struct
    (
      TREASURY_MOD_HASH
      PROPOSAL_TIMER_MOD_HASH
      EPHEMERAL_VOTE_PUZHASH
      CURRENT_CAT_ISSUANCE
      PROPOSAL_PASS_PERCENTAGE
      TREASURY_ID
      PROPOSAL_TIMELOCK
      SUM_VOTES
      TOTAL_VOTES
      INNERPUZHASH
    )
  )
    (calculate_singleton_puzzle_hash
      proposal_singleton_struct
      (puzzle-hash-of-curried-function PROPOSAL_MOD_HASH
        INNERPUZHASH
        (sha256 ONE TOTAL_VOTES)
        (sha256 ONE SUM_VOTES)
        (sha256 ONE PROPOSAL_TIMELOCK)
        (sha256 ONE TREASURY_ID)
        (sha256 ONE PROPOSAL_PASS_PERCENTAGE)
        (sha256 ONE CURRENT_CAT_ISSUANCE)
        (sha256 ONE CAT_TAIL)
        (sha256 ONE EPHEMERAL_VOTE_PUZHASH)  ; this is the mod already curried with what it needs - should be a constant
        (sha256 ONE TREASURY_MOD_HASH)
        (sha256 ONE CAT_MOD_HASH)
        (sha256 ONE PROPOSAL_TIMER_MOD_HASH)
        (sha256 ONE PROPOSAL_MOD_HASH)
        (sha256tree proposal_singleton_struct)
      )
    )
  )

  (defun calculate_lockup_puzzlehash (PROPOSAL_MOD_HASH SINGLETON_MOD_HASH SINGLETON_LAUNCHER_PUZHASH LOCKUP_MOD_HASH EPHEMERAL_VOTE_MODHASH CAT_MOD_HASH CAT_TAIL LOCKUP_TIME previous_votes pubkey)
    (puzzle-hash-of-curried-function LOCKUP_MOD_HASH
                                     (sha256 ONE pubkey)
                                     (sha256 ONE LOCKUP_TIME)
                                     (sha256tree previous_votes)
                                     (sha256 ONE CAT_TAIL)
                                     (sha256 ONE CAT_MOD_HASH)
                                     (sha256 ONE EPHEMERAL_VOTE_MODHASH)
                                     (sha256 ONE LOCKUP_MOD_HASH)
    )
  )

  (defun wrap_vote_in_cat_mod (CAT_MOD_HASH CAT_TAIL EPHEMERAL_VOTE_PUZHASH)
    (puzzle-hash-of-curried-function CAT_MOD_HASH
                                     EPHEMERAL_VOTE_PUZHASH
                                     (sha256 ONE CAT_TAIL)
                                     (sha256 ONE CAT_MOD_HASH)
    )
  )


  ; main
  (if my_id

    ; vote again
    (c
      (list
        AGG_SIG_ME
        PUBKEY
        (sha256tree (list
          new_proposal_vote_id_or_return_address
          vote_info
          )
        )
      )
      (c
        (list ASSERT_MY_AMOUNT my_amount)
        (c
          (list ASSERT_MY_COIN_ID my_id)
          (check_not_previously_voted  ; takes: CAT_MOD_HASH CAT_TAIL ephemeral_vote_puzhash my_id my_amount message new_vote_id previous_votes
            SINGLETON_MOD_HASH
            SINGLETON_LAUNCHER
            CAT_MOD_HASH
            CAT_TAIL
            PROPOSAL_MOD_HASH
            my_id
            my_amount
            (sha256tree (list new_proposal_vote_id_or_return_address my_amount vote_info my_id))
            new_proposal_vote_id_or_return_address
            PREVIOUS_VOTES
            proposal_curry_vals
          )
        )
      )
    )

    ; return to return_address
    (list (list ASSERT_HEIGHT_RELATIVE LOCKUP_TIME) (list CREATE_COIN new_proposal_vote_id_or_return_address my_amount) (list ASSERT_MY_AMOUNT my_amount) (list AGG_SIG_ME PUBKEY new_proposal_vote_id_or_return_address))
  )
)
