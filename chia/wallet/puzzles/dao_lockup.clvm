(mod (
  PROPOSAL_MOD_HASH
  SINGLETON_MOD_HASH
  SINGLETON_LAUNCHER_PUZHASH
  LOCKUP_MOD_HASH
  CAT_MOD_HASH
  CAT_TAIL
  PREVIOUS_VOTES
  LOCKUP_TIME
  INNERPUZ
  my_id  ; if my_id is 0 we do the return to return_address (exit voting mode) spend case
  inner_solution
  my_amount
  new_proposal_vote_id_or_removal_id
  proposal_curry_vals
  vote_info
)
  (include condition_codes.clvm)
  (include curry-and-treehash.clinc)
  (include *standard-cl-21*)

  (defconstant dao_finished_state 0xfb015415f2e6a09c1141f880fc2135beec6adf2a19e4d02a191432846db16559)

  ; take two lists and merge them into one
  (defun merge_list (list_a list_b)
    (if list_a
      (c (f list_a) (merge_list (r list_a) list_b))
      list_b
    )
  )

  (defun check_conditions (conditions lockup_puzhash my_amount message)
    (if conditions
      (if (= (f (f conditions)) CREATE_COIN)  ; this guarantees that the new coin is obeying the rules - other coins are banned to avoid re-voting
        (if (all (= (f (r (f conditions))) lockup_puzhash) (= (f (r (r (f conditions)))) my_amount))
          (c (f conditions) (check_conditions (r conditions) lockup_puzhash my_amount message))
          (x)
        )
        (if (= (f (f conditions)) CREATE_PUZZLE_ANNOUNCEMENT)  ; this secures the values used to generate message - other messages are banned in case of LIES
          (if (= (f (r (f conditions))) message)
            (c (f conditions) (check_conditions (r conditions) lockup_puzhash my_amount message))
            (x)
          )
          (c (f conditions) (check_conditions (r conditions) lockup_puzhash my_amount message))
        )
      )
      ()
    )
  )

  (defun check_not_previously_voted (
    SINGLETON_MOD_HASH
    SINGLETON_LAUNCHER_PUZHASH
    LOCKUP_MOD_HASH
    CAT_MOD_HASH
    CAT_TAIL
    PROPOSAL_MOD_HASH
    LOCKUP_TIME
    INNERPUZ
    my_idq
    new_vote_id
    previous_votes
    proposal_curry_vals
  )
    (if previous_votes
      (if (= new_vote_id (f previous_votes))
        (x)
        (check_not_previously_voted
          SINGLETON_MOD_HASH
          SINGLETON_LAUNCHER_PUZHASH
          LOCKUP_MOD_HASH
          CAT_MOD_HASH
          CAT_TAIL
          PROPOSAL_MOD_HASH
          LOCKUP_TIME
          INNERPUZ
          my_id
          new_vote_id
          (r previous_votes)
          proposal_curry_vals
        )
      )
      (list ASSERT_PUZZLE_ANNOUNCEMENT (sha256
          (calculate_proposal_puzzlehash PROPOSAL_MOD_HASH CAT_MOD_HASH LOCKUP_MOD_HASH CAT_TAIL (c SINGLETON_MOD_HASH (c new_vote_id SINGLETON_LAUNCHER_PUZHASH)) proposal_curry_vals)
          my_id
        )
      )
    )
  )


  (defun calculate_singleton_puzzle_hash (PROPOSAL_SINGLETON_STRUCT inner_puzzle_hash)
     (puzzle-hash-of-curried-function (f PROPOSAL_SINGLETON_STRUCT)
                                      inner_puzzle_hash
                                      (sha256tree PROPOSAL_SINGLETON_STRUCT)
     )
  )

(defun calculate_proposal_puzzlehash (
    PROPOSAL_MOD_HASH
    CAT_MOD_HASH
    LOCKUP_MOD_HASH
    CAT_TAIL
    proposal_singleton_struct
    (
      TREASURY_MOD_HASH
      PROPOSAL_TIMER_MOD_HASH
      CURRENT_CAT_ISSUANCE
      PROPOSAL_PASS_PERCENTAGE
      TREASURY_ID
      PROPOSAL_TIMELOCK
      SUM_VOTES
      TOTAL_VOTES
      INNERPUZHASH
    )
  )
    (calculate_singleton_puzzle_hash
      proposal_singleton_struct
      (puzzle-hash-of-curried-function PROPOSAL_MOD_HASH
        INNERPUZHASH
        (sha256 ONE TOTAL_VOTES)
        (sha256 ONE SUM_VOTES)
        (sha256 ONE PROPOSAL_TIMELOCK)
        (sha256 ONE TREASURY_ID)
        (sha256 ONE PROPOSAL_PASS_PERCENTAGE)
        (sha256 ONE CURRENT_CAT_ISSUANCE)
        (sha256 ONE CAT_TAIL)
        (sha256 ONE LOCKUP_MOD_HASH)
        (sha256 ONE TREASURY_MOD_HASH)
        (sha256 ONE CAT_MOD_HASH)
        (sha256 ONE PROPOSAL_TIMER_MOD_HASH)
        (sha256 ONE PROPOSAL_MOD_HASH)
        (sha256tree proposal_singleton_struct)
      )
    )
  )

  (defun calculate_lockup_puzzlehash (PROPOSAL_MOD_HASH SINGLETON_MOD_HASH SINGLETON_LAUNCHER_PUZHASH LOCKUP_MOD_HASH CAT_MOD_HASH CAT_TAIL LOCKUP_TIME previous_votes INNERPUZ)
    (puzzle-hash-of-curried-function LOCKUP_MOD_HASH
                                     (sha256 ONE INNERPUZ)
                                     (sha256 ONE LOCKUP_TIME)
                                     (sha256tree previous_votes)
                                     (sha256 ONE CAT_TAIL)
                                     (sha256 ONE CAT_MOD_HASH)
                                     (sha256 ONE LOCKUP_MOD_HASH)
                                     (sha256 ONE SINGLETON_LAUNCHER_PUZHASH)
                                     (sha256 ONE SINGLETON_MOD_HASH)
                                     (sha256 ONE PROPOSAL_MOD_HASH)
    )
  )

  (defun check_for_removal_announcement (
    PROPOSAL_MOD_HASH
    SINGLETON_MOD_HASH
    SINGLETON_LAUNCHER_PUZHASH
    LOCKUP_MOD_HASH
    CAT_MOD_HASH
    CAT_TAIL
    LOCKUP_TIME
    PREVIOUS_VOTES
    INNERPUZ
    removal_id
    my_amount
    proposal_curry_vals
    unused_votes
    )
    (if PREVIOUS_VOTES
      (if (= (f PREVIOUS_VOTES) removal_id)
        (list
          (list
            CREATE_COIN
            (calculate_lockup_puzzlehash
              PROPOSAL_MOD_HASH
              SINGLETON_MOD_HASH
              SINGLETON_LAUNCHER_PUZHASH
              LOCKUP_MOD_HASH
              CAT_MOD_HASH
              CAT_TAIL
              LOCKUP_TIME
              (merge_list unused_votes (r PREVIOUS_VOTES))
              INNERPUZ
            )
            my_amount
          )
          (list
            ASSERT_PUZZLE_ANNOUNCEMENT
            (sha256
              (calculate_singleton_puzzle_hash
                (c SINGLETON_MOD_HASH (c removal_id SINGLETON_LAUNCHER_PUZHASH))
                dao_finished_state
              )
              'f'
            )
          )
          (list ASSERT_MY_AMOUNT my_amount)
        )

        (check_for_removal_announcement
          PROPOSAL_MOD_HASH
          SINGLETON_MOD_HASH
          SINGLETON_LAUNCHER_PUZHASH
          LOCKUP_MOD_HASH
          CAT_MOD_HASH
          CAT_TAIL
          LOCKUP_TIME
          (r PREVIOUS_VOTES)
          INNERPUZ
          removal_id
          my_amount
          proposal_curry_vals
          (c (f PREVIOUS_VOTES) unused_votes)
        )
      )
      (x)  ; proposal ID not found, invalid spend
    )
  )


  ; main
  (if my_id

    (c
      (list ASSERT_MY_AMOUNT my_amount)
      (c
        (list ASSERT_MY_COIN_ID my_id)
        (c
          (check_not_previously_voted
            SINGLETON_MOD_HASH
            SINGLETON_LAUNCHER_PUZHASH
            LOCKUP_MOD_HASH
            CAT_MOD_HASH
            CAT_TAIL
            PROPOSAL_MOD_HASH
            LOCKUP_TIME
            INNERPUZ
            my_id
            new_proposal_vote_id_or_removal_id
            PREVIOUS_VOTES
            proposal_curry_vals
          )
          (check_conditions
            (a INNERPUZ inner_solution)
            (calculate_lockup_puzzlehash
              PROPOSAL_MOD_HASH
              SINGLETON_MOD_HASH
              SINGLETON_LAUNCHER_PUZHASH
              LOCKUP_MOD_HASH
              CAT_MOD_HASH
              CAT_TAIL
              LOCKUP_TIME
              (c new_proposal_vote_id_or_removal_id PREVIOUS_VOTES)
              INNERPUZ
            )
            my_amount
            (sha256tree (list new_proposal_vote_id_or_removal_id my_amount vote_info my_id))
          )
        )

      )
    )

    ; return to return_address - check if our locked list is empty
    (if PREVIOUS_VOTES
      (check_for_removal_announcement
        PROPOSAL_MOD_HASH
        SINGLETON_MOD_HASH
        SINGLETON_LAUNCHER_PUZHASH
        LOCKUP_MOD_HASH
        CAT_MOD_HASH
        CAT_TAIL
        LOCKUP_TIME
        PREVIOUS_VOTES
        INNERPUZ
        new_proposal_vote_id_or_removal_id
        my_amount
        proposal_curry_vals
        ()
      )
      (if new_proposal_vote_id  ; this forces the new_proposal_vote_id to be 0 if you're actually exiting, allows for tricks a layer up
        (x)  ; Dear Reviewer: you likely hate multi-layer tricks, but it saves a LOT of processing above, and costs v little here
        (a INNERPUZ inner_solution)
      )
    )
  )
)
