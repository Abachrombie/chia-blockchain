(mod (
  SINGLETON_STRUCT
  PROPOSAL_MOD_HASH
  PROPOSAL_TIMER_MOD_HASH
  CAT_MOD_HASH
  EPHEMERAL_VOTE_PUZHASH  ; this is the mod already curried with what it needs - should still be a constant
  CAT_TAIL
  CURRENT_CAT_ISSUANCE
  PROPOSAL_PASS_PERCENTAGE
  TREASURY_ID
  PROPOSAL_TIMELOCK
  VOTES
  INNERPUZ  ; this is what runs if this proposal is successful
  vote_amount
  vote_info
  vote_coin_id
  solution
)
  (include condition_codes.clvm)
  (include curry-and-treehash.clinc)

  (defconstant TEN_THOUSAND 10000)

  ; TODO: fix this function - track total votes
  (defun-inline calculate_win_percentage (CURRENT_CAT_ISSUANCE PROPOSAL_PASS_PERCENTAGE)
    (f (divmod (* CURRENT_CAT_ISSUANCE PROPOSAL_PASS_PERCENTAGE) TEN_THOUSAND))
  )

  (defun calculate_timer_puzhash (
    PROPOSAL_TIMER_MOD_HASH
    PROPOSAL_MOD_HASH
    CAT_TAIL
    CURRENT_CAT_ISSUANCE
    PROPOSAL_TIMELOCK
    PROPOSAL_PASS_PERCENTAGE
    MY_SINGLETON_STRUCT
    TREASURY_ID
    )
    (puzzle-hash-of-curried-function PROPOSAL_TIMER_MOD_HASH
                                     (sha256 ONE TREASURY_ID)
                                     (sha256tree MY_SINGLETON_STRUCT)
                                     (sha256 ONE PROPOSAL_PASS_PERCENTAGE)
                                     (sha256 ONE PROPOSAL_TIMELOCK)
                                     (sha256 ONE CURRENT_CAT_ISSUANCE)
                                     (sha256 ONE CAT_TAIL)
                                     (sha256 ONE PROPOSAL_TIMER_MOD_HASH)
                                     (sha256 ONE PROPOSAL_MOD_HASH)
    )
  )

  (defun recreate_self (
    SINGLETON_STRUCT
    PROPOSAL_MOD_HASH
    PROPOSAL_TIMER_MOD_HASH
    CAT_MOD_HASH
    EPHEMERAL_VOTE_PUZHASH
    CAT_TAIL
    CURRENT_CAT_ISSUANCE
    PROPOSAL_PASS_PERCENTAGE
    TREASURY_ID
    TIMELOCK
    VOTES
    INNERPUZ
  )
    (puzzle-hash-of-curried-function PROPOSAL_MOD_HASH
                                     (sha256tree INNERPUZ)
                                     (sha256 ONE VOTES)
                                     (sha256 ONE TIMELOCK)
                                     (sha256 ONE TREASURY_ID)
                                     (sha256 ONE PROPOSAL_PASS_PERCENTAGE)
                                     (sha256 ONE CURRENT_CAT_ISSUANCE)
                                     (sha256 ONE CAT_TAIL)
                                     (sha256 ONE EPHEMERAL_VOTE_PUZHASH)
                                     (sha256 ONE CAT_MOD_HASH)
                                     (sha256 ONE PROPOSAL_TIMER_MOD_HASH)
                                     (sha256 ONE PROPOSAL_MOD_HASH)
                                     (sha256tree SINGLETON_STRUCT)
    )
  )

  (defun wrap_vote_in_cat_mod (CAT_MOD_HASH CAT_TAIL EPHEMERAL_VOTE_PUZHASH)
    (puzzle-hash-of-curried-function CAT_MOD_HASH
                                     EPHEMERAL_VOTE_PUZHASH
                                     (sha256 ONE CAT_TAIL)
                                     (sha256 ONE CAT_MOD_HASH)
    )
  )

  ; main
  (if solution
    ; if we've passed
    ; TODO: we want to assert an announcement from the treasury here
    (c
      (list ASSERT_HEIGHT_RELATIVE 3)
      (c
        (list CREATE_PUZZLE_ANNOUNCEMENT TREASURY_ID)
        (c
          (list ASSERT_PUZZLE_ANNOUNCEMENT (sha256
            (calculate_timer_puzhash
              PROPOSAL_TIMER_MOD_HASH
              PROPOSAL_MOD_HASH
              CAT_TAIL
              CURRENT_CAT_ISSUANCE
              PROPOSAL_TIMELOCK
              PROPOSAL_PASS_PERCENTAGE
              SINGLETON_STRUCT
              TREASURY_ID
            )
            (f (r SINGLETON_STRUCT))
            )
          )
          (if (> VOTES (calculate_win_percentage CURRENT_CAT_ISSUANCE PROPOSAL_PASS_PERCENTAGE))
            (a INNERPUZ solution)
            (x)
          )
        )
      )
    )
    ; if we're taking votes
    (list
      (list CREATE_PUZZLE_ANNOUNCEMENT vote_coin_id)  ; do any other values need to go here?

      (list ASSERT_PUZZLE_ANNOUNCEMENT (sha256 (wrap_vote_in_cat_mod CAT_MOD_HASH CAT_TAIL EPHEMERAL_VOTE_PUZHASH) (sha256tree (list (f (r SINGLETON_STRUCT)) vote_amount vote_info vote_coin_id))))
      (list
        CREATE_COIN
        (recreate_self
          SINGLETON_STRUCT
          PROPOSAL_MOD_HASH
          PROPOSAL_TIMER_MOD_HASH
          CAT_MOD_HASH
          EPHEMERAL_VOTE_PUZHASH
          CAT_TAIL
          CURRENT_CAT_ISSUANCE
          PROPOSAL_PASS_PERCENTAGE
          TREASURY_ID
          PROPOSAL_TIMELOCK
          (if vote_info (+ VOTES vote_amount) (- VOTES vote_amount))
          INNERPUZ
        )
        ONE  ; TODO: maybe this could my_amount, but why would a proposal hold any value?
      )
    )
  )
)
