name: ðŸŽ­ðŸ§ª Playwright Tests - Linux DEB AMD64

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Tagged release testing scenario'
        required: false
        type: choice
        default: ''
        options:
        - ''
        - 9.9.9-b1
        - 9.9.9-rc1
        - 9.9.9

concurrency:
  # SHA is added to the end if on `main` to let all main workflows run
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}-${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/long_lived/')) && github.sha || '' }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: write

jobs:
  build:
    name: Linux amd64 Playwright tests
    runs-on: ubuntu-latest
    container: chianetwork/ubuntu-18.04-builder:latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version: [3.8]

    steps:
    - uses: Chia-Network/actions/clean-workspace@main

    - name: Add safe git directory
      uses: Chia-Network/actions/git-mark-workspace-safe@main

    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive

    - uses: Chia-Network/actions/git-ssh-to-https@main

    - name: Cleanup any leftovers that exist from previous runs
      run: bash build_scripts/clean-runner.sh || true

    - name: Set Env
      uses: Chia-Network/actions/setjobenv@main
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Check tag type
      id: check_tag_type
      shell: bash
      run: |
        REG_B="^[0-9]+\.[0-9]+\.[0-9]+-b[0-9]+$"
        REG_RC="^[0-9]+\.[0-9]+\.[0-9]+-rc[0-9]+$"
        if [[ "${{ github.event.release.tag_name }}" =~ $REG_B ]] || [[ "${{ inputs.release_type }}" =~ $REG_B ]]; then
          echo "TAG_TYPE=beta" >> "$GITHUB_OUTPUT"
        elif [[ "${{ github.event.release.tag_name }}" =~ $REG_RC ]] || [[ "${{ inputs.release_type }}" =~ $REG_RC ]]; then
          echo "TAG_TYPE=rc" >> "$GITHUB_OUTPUT"
        fi

    # Create our own venv outside of the git directory JUST for getting the ACTUAL version so that install can't break it
    - name: Get version number
      id: version_number
      run: |
        python3 -m venv ../venv
        . ../venv/bin/activate
        pip3 install setuptools_scm
        echo "CHIA_INSTALLER_VERSION=$(python3 ./build_scripts/installer-version.py)" >> "$GITHUB_OUTPUT"
        deactivate

    - name: Get latest madmax plotter
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        LATEST_MADMAX=$(gh api repos/Chia-Network/chia-plotter-madmax/releases/latest --jq 'select(.prerelease == false) | .tag_name')
        mkdir "$GITHUB_WORKSPACE"/madmax
        gh release download -R Chia-Network/chia-plotter-madmax "$LATEST_MADMAX" -p 'chia_plot-*-x86-64' -O "$GITHUB_WORKSPACE"/madmax/chia_plot
        gh release download -R Chia-Network/chia-plotter-madmax "$LATEST_MADMAX" -p 'chia_plot_k34-*-x86-64' -O "$GITHUB_WORKSPACE"/madmax/chia_plot_k34
        chmod +x "$GITHUB_WORKSPACE"/madmax/chia_plot
        chmod +x "$GITHUB_WORKSPACE"/madmax/chia_plot_k34

    - name: Fetch bladebit versions
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Fetch the latest version of each type
        LATEST_RELEASE=$(gh api repos/Chia-Network/bladebit/releases/latest --jq 'select(.prerelease == false) | .tag_name')
        LATEST_BETA=$(gh api repos/Chia-Network/bladebit/releases --jq 'map(select(.prerelease) | select(.tag_name | test("^v[0-9]+\\.[0-9]+\\.[0-9]+-beta[0-9]+$"))) | first | .tag_name')
        LATEST_RC=$(gh api repos/Chia-Network/bladebit/releases --jq 'map(select(.prerelease) | select(.tag_name | test("^v[0-9]+\\.[0-9]+\\.[0-9]+-rc[0-9]+$"))) | first | .tag_name')

        # Compare the versions and choose the newest that matches the requirements
        if [[ "$TAG_TYPE" == "beta" || -z "${{ github.event.release.tag_name }}" ]]; then
          # For beta or dev builds (indicated by the absence of a tag), use the latest version available
          LATEST_VERSION=$(printf "%s\n%s\n%s\n" "$LATEST_RELEASE" "$LATEST_BETA" "$LATEST_RC" | sed '/-/!s/$/_/' | sort -V | sed 's/_$//' | tail -n 1)
        elif [[ "$TAG_TYPE" == "rc" ]]; then
          # For RC builds, use the latest RC or full release if it's newer
          LATEST_VERSION=$(printf "%s\n%s\n" "$LATEST_RELEASE" "$LATEST_RC" | sed '/-/!s/$/_/' | sort -V | sed 's/_$//' | tail -n 1)
        else
          # For full releases, use the latest full release
          LATEST_VERSION="$LATEST_RELEASE"
        fi
        echo "LATEST_VERSION=$LATEST_VERSION" >> "$GITHUB_ENV"

    - name: Get latest bladebit plotter
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Download and extract the chosen version
        mkdir "$GITHUB_WORKSPACE"/bladebit
        cd "$GITHUB_WORKSPACE"/bladebit
        gh release download -R Chia-Network/bladebit "$LATEST_VERSION" -p 'bladebit*-ubuntu-x86-64.tar.gz'
        ls *.tar.gz | xargs -I{} bash -c 'tar -xzf {} && rm {}'
        ls bladebit* | xargs -I{} chmod +x {}
        cd "$OLDPWD"

    - uses: ./.github/actions/install
      with:
        python-version: ${{ matrix.python-version }}
        development: true

    - uses: chia-network/actions/activate-venv@main

    - name: Prepare GUI cache
      id: gui-ref
      run: |
        gui_ref=$(git submodule status chia-blockchain-gui | sed -e 's/^ //g' -e 's/ chia-blockchain-gui.*$//g')
        echo "${gui_ref}"
        echo "GUI_REF=${gui_ref}" >> "$GITHUB_OUTPUT"
        echo "rm -rf ./chia-blockchain-gui"
        rm -rf ./chia-blockchain-gui

    - name: Cache GUI
      uses: actions/cache@v3
      id: cache-gui
      with:
        path: ./chia-blockchain-gui
        key: ${{ runner.os }}-deb-chia-blockchain-gui-${{ steps.gui-ref.outputs.GUI_REF }}

    - if: steps.cache-gui.outputs.cache-hit != 'true'
      name: Build GUI
      continue-on-error: false
      run: |
        bash install-gui.sh

    - name: Run Tests
      run: |
        cd chia-blockchain-gui/packages/gui
        npm install npx
        sudo apt update
        sudo apt-get install -qy xvfb libnss3-dev libatk1.0-0 libatk-bridge2.0-0 libgtk-3-0 libgbm-dev libasound2
        xvfb-run npx playwright test tests/select_key_page/key_import_negative_test.spec.ts